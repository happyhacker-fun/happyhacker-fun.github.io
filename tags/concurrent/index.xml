<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Concurrent on happyhacker的技术分享</title>
        <link>http://localhost:1313/tags/concurrent/</link>
        <description>Recent content in Concurrent on happyhacker的技术分享</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 05 Feb 2021 22:07:54 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/concurrent/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Java并发编程</title>
        <link>http://localhost:1313/p/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</link>
        <pubDate>Fri, 05 Feb 2021 22:07:54 +0800</pubDate>
        
        <guid>http://localhost:1313/p/java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</guid>
        <description>&lt;p&gt;Java相比PHP的一大优势就是具有强大的并发能力了，本文详细阐述Java并发编程的方法和注意事项。&lt;/p&gt;
&lt;h2 id=&#34;为什么要并发&#34;&gt;
    &lt;a href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e5%b9%b6%e5%8f%91&#34;&gt;#&lt;/a&gt;
    为什么要并发
&lt;/h2&gt;&lt;p&gt;使用并发最大的一个原因就是要&lt;strong&gt;充分发挥多核处理器的能力&lt;/strong&gt;，单线程应用&lt;/p&gt;
&lt;h3 id=&#34;线程的优势&#34;&gt;
    &lt;a href=&#34;#%e7%ba%bf%e7%a8%8b%e7%9a%84%e4%bc%98%e5%8a%bf&#34;&gt;#&lt;/a&gt;
    线程的优势
&lt;/h3&gt;&lt;h3 id=&#34;线程带来的风险&#34;&gt;
    &lt;a href=&#34;#%e7%ba%bf%e7%a8%8b%e5%b8%a6%e6%9d%a5%e7%9a%84%e9%a3%8e%e9%99%a9&#34;&gt;#&lt;/a&gt;
    线程带来的风险
&lt;/h3&gt;&lt;h2 id=&#34;线程安全性&#34;&gt;
    &lt;a href=&#34;#%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e6%80%a7&#34;&gt;#&lt;/a&gt;
    线程安全性
&lt;/h2&gt;&lt;h2 id=&#34;对象的共享&#34;&gt;
    &lt;a href=&#34;#%e5%af%b9%e8%b1%a1%e7%9a%84%e5%85%b1%e4%ba%ab&#34;&gt;#&lt;/a&gt;
    对象的共享
&lt;/h2&gt;&lt;h2 id=&#34;对象的组合&#34;&gt;
    &lt;a href=&#34;#%e5%af%b9%e8%b1%a1%e7%9a%84%e7%bb%84%e5%90%88&#34;&gt;#&lt;/a&gt;
    对象的组合
&lt;/h2&gt;&lt;h2 id=&#34;基础构建模块&#34;&gt;
    &lt;a href=&#34;#%e5%9f%ba%e7%a1%80%e6%9e%84%e5%bb%ba%e6%a8%a1%e5%9d%97&#34;&gt;#&lt;/a&gt;
    基础构建模块
&lt;/h2&gt;&lt;h2 id=&#34;任务执行&#34;&gt;
    &lt;a href=&#34;#%e4%bb%bb%e5%8a%a1%e6%89%a7%e8%a1%8c&#34;&gt;#&lt;/a&gt;
    任务执行
&lt;/h2&gt;&lt;h2 id=&#34;取消与关闭&#34;&gt;
    &lt;a href=&#34;#%e5%8f%96%e6%b6%88%e4%b8%8e%e5%85%b3%e9%97%ad&#34;&gt;#&lt;/a&gt;
    取消与关闭
&lt;/h2&gt;&lt;h2 id=&#34;线程池的使用&#34;&gt;
    &lt;a href=&#34;#%e7%ba%bf%e7%a8%8b%e6%b1%a0%e7%9a%84%e4%bd%bf%e7%94%a8&#34;&gt;#&lt;/a&gt;
    线程池的使用
&lt;/h2&gt;&lt;h2 id=&#34;图形用户界面应用程序&#34;&gt;
    &lt;a href=&#34;#%e5%9b%be%e5%bd%a2%e7%94%a8%e6%88%b7%e7%95%8c%e9%9d%a2%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f&#34;&gt;#&lt;/a&gt;
    图形用户界面应用程序
&lt;/h2&gt;&lt;h2 id=&#34;避免活跃性危险&#34;&gt;
    &lt;a href=&#34;#%e9%81%bf%e5%85%8d%e6%b4%bb%e8%b7%83%e6%80%a7%e5%8d%b1%e9%99%a9&#34;&gt;#&lt;/a&gt;
    避免活跃性危险
&lt;/h2&gt;&lt;h2 id=&#34;性能与可伸缩性&#34;&gt;
    &lt;a href=&#34;#%e6%80%a7%e8%83%bd%e4%b8%8e%e5%8f%af%e4%bc%b8%e7%bc%a9%e6%80%a7&#34;&gt;#&lt;/a&gt;
    性能与可伸缩性
&lt;/h2&gt;&lt;h2 id=&#34;并发程序的测试&#34;&gt;
    &lt;a href=&#34;#%e5%b9%b6%e5%8f%91%e7%a8%8b%e5%ba%8f%e7%9a%84%e6%b5%8b%e8%af%95&#34;&gt;#&lt;/a&gt;
    并发程序的测试
&lt;/h2&gt;&lt;h2 id=&#34;显式锁&#34;&gt;
    &lt;a href=&#34;#%e6%98%be%e5%bc%8f%e9%94%81&#34;&gt;#&lt;/a&gt;
    显式锁
&lt;/h2&gt;&lt;h2 id=&#34;构建自定义的同步工具&#34;&gt;
    &lt;a href=&#34;#%e6%9e%84%e5%bb%ba%e8%87%aa%e5%ae%9a%e4%b9%89%e7%9a%84%e5%90%8c%e6%ad%a5%e5%b7%a5%e5%85%b7&#34;&gt;#&lt;/a&gt;
    构建自定义的同步工具
&lt;/h2&gt;&lt;h2 id=&#34;原子变量与非阻塞同步机制&#34;&gt;
    &lt;a href=&#34;#%e5%8e%9f%e5%ad%90%e5%8f%98%e9%87%8f%e4%b8%8e%e9%9d%9e%e9%98%bb%e5%a1%9e%e5%90%8c%e6%ad%a5%e6%9c%ba%e5%88%b6&#34;&gt;#&lt;/a&gt;
    原子变量与非阻塞同步机制
&lt;/h2&gt;&lt;h2 id=&#34;java内存模型&#34;&gt;
    &lt;a href=&#34;#java%e5%86%85%e5%ad%98%e6%a8%a1%e5%9e%8b&#34;&gt;#&lt;/a&gt;
    Java内存模型
&lt;/h2&gt;</description>
        </item>
        <item>
        <title>《并发编程实战》读书笔记</title>
        <link>http://localhost:1313/p/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Sat, 18 Apr 2020 17:22:43 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;p&gt;读书过程中看到的比较准确的定义。&lt;/p&gt;
&lt;h2 id=&#34;线程安全的类&#34;&gt;
    &lt;a href=&#34;#%e7%ba%bf%e7%a8%8b%e5%ae%89%e5%85%a8%e7%9a%84%e7%b1%bb&#34;&gt;#&lt;/a&gt;
    线程安全的类
&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为，那么就称这个类是线程安全的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在线程安全类中封装了必要的同步机制，因此客户端无须进一步采取同步措施。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;无状态对象一定是线程安全的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;假定有两个操作A和B，如果从执行A的线程来看，当零一个线程执行B时，要么将B全部执行完，要么完全不执行B，那么A和B对彼此来说就是原子的。原子操作是指，对于访问同一个状态的所有操作（包括该操作本身）来说，这个操作是一个以原子方式执行的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际情况中，应尽可能的使用现有的线程安全对象来管理类的状态。与非线程安全的对象相比，判断线程安全对象的可能状态及其状态转换情况要更为容易，从而也更容易维护和验证线程安全性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;要保持状态的一致性，就需要在单个原子操作中更新所有相关的状态变量。&lt;/p&gt;
&lt;/blockquote&gt;</description>
        </item>
        
    </channel>
</rss>
