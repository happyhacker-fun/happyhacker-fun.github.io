<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Hikari on happyhacker的技术分享</title>
        <link>http://localhost:1313/tags/hikari/</link>
        <description>Recent content in Hikari on happyhacker的技术分享</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 28 Mar 2020 23:03:18 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/hikari/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Springboot使用Hikari集成数据源</title>
        <link>http://localhost:1313/p/springboot%E4%BD%BF%E7%94%A8hikari%E9%9B%86%E6%88%90%E6%95%B0%E6%8D%AE%E6%BA%90/</link>
        <pubDate>Sat, 28 Mar 2020 23:03:18 +0800</pubDate>
        
        <guid>http://localhost:1313/p/springboot%E4%BD%BF%E7%94%A8hikari%E9%9B%86%E6%88%90%E6%95%B0%E6%8D%AE%E6%BA%90/</guid>
        <description>&lt;p&gt;Springboot提供了多种方式集成数据源，常用的是Hikari（国外）和Druid（国内）。但二者专注的问题其实都相对简单，没有对多数据源、主从分离做直接支持，而需要使用者自行配置。&lt;/p&gt;
&lt;h2 id=&#34;概念&#34;&gt;
    &lt;a href=&#34;#%e6%a6%82%e5%bf%b5&#34;&gt;#&lt;/a&gt;
    概念
&lt;/h2&gt;&lt;p&gt;首先要明确这里提到的所有东西是干嘛用的。&lt;/p&gt;
&lt;h3 id=&#34;jdbc&#34;&gt;
    &lt;a href=&#34;#jdbc&#34;&gt;#&lt;/a&gt;
    JDBC
&lt;/h3&gt;&lt;p&gt;这里提到的所有东西的基础是JDBC，它定义了和所有类型的数据库通信的方法，但没有提供实现，需要指定驱动类来和指定的数据库通信。&lt;/p&gt;
&lt;h3 id=&#34;连接池&#34;&gt;
    &lt;a href=&#34;#%e8%bf%9e%e6%8e%a5%e6%b1%a0&#34;&gt;#&lt;/a&gt;
    连接池
&lt;/h3&gt;&lt;p&gt;Java服务是常驻进程的，这点和PHP不同，所以Java通常要使用连接池来减少频繁连接数据库的开销，当然PHP也想减少，但FPM的运行机制不允许它这么做。Hikari就是做这件事情的。连接池可不是创建之后就不管了，还需要对已经建立的连接进行管理，比如请求量较小时最多允许多少个空闲的连接/请求量较大时最大允许多少个连接/由于连接会被server端关闭（通常由于&lt;code&gt;wait_timeout&lt;/code&gt;的配置）需要重连/新建连接后是否需要验证连接的有效性等等，但不管怎么样，它做的最本质的工作就是可以让我们从中取出一个JDBC的实例来操作数据库。&lt;/p&gt;
&lt;h3 id=&#34;sqlbuildercode-generator&#34;&gt;
    &lt;a href=&#34;#sqlbuildercode-generator&#34;&gt;#&lt;/a&gt;
    SqlBuilder/Code generator
&lt;/h3&gt;&lt;p&gt;至于mybatis，现在直接说mybatis是什么好像不太好说了，因为mybatis社区现在做了太多项目了。我理解原本它就是一个sqlbuilder，定义了一套基于XML的配置，根据定义好的Mapper来生成sql语句。后来整个社区好像都在去XML化，所以就有了Java代码版本的Mapper，然后就发现用Java写Mapper有太多模板代码（看起来差不多但又不完全相同的代码，通常认为是可以避免的）了，每次复制一番也不爽，于是又诞生了mybatis-generator，可以根据指定的表结构生成Mapper文件，加上封装良好的各种&lt;code&gt;*Statement*Provider&lt;/code&gt;，可以很简单的实现灵活的功能。&lt;/p&gt;
&lt;h3 id=&#34;主从分离&#34;&gt;
    &lt;a href=&#34;#%e4%b8%bb%e4%bb%8e%e5%88%86%e7%a6%bb&#34;&gt;#&lt;/a&gt;
    主从分离
&lt;/h3&gt;&lt;p&gt;通常数据库会有主从分离，当然也就需要在写主库、读从库，我们当然不想每次指定要用哪个库了，因为已经有了连接池，主从数据库都已经建立了连接，简单理解就是所有&lt;code&gt;select&lt;/code&gt;操作都从从库的连接池取连接，所有的&lt;code&gt;insert/update/delete&lt;/code&gt;操作都从主库的连接池取连接，AOP大放异彩的时候就到了。&lt;/p&gt;
&lt;h3 id=&#34;数据库多实例配置&#34;&gt;
    &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e5%ba%93%e5%a4%9a%e5%ae%9e%e4%be%8b%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;
    数据库多实例配置
&lt;/h3&gt;&lt;p&gt;说起来如果从微服务的角度考虑，每个服务应该只配置一个数据库实例（库或者端口），但当业务没有那么复杂，没有太大的动力去做微服务时，就需要在一个项目中配置多个数据库实例，而Springboot是没有直接提供这种方式的。&lt;/p&gt;
&lt;p&gt;解决完上面的问题，其实也就解决了SpringBoot项目在使用数据库过程中的几乎所有问题，那么能不能再把它打一个包，通过starter的方式被引入呢？可以尝试一下。&lt;/p&gt;
&lt;h2 id=&#34;jdbc基本操作&#34;&gt;
    &lt;a href=&#34;#jdbc%e5%9f%ba%e6%9c%ac%e6%93%8d%e4%bd%9c&#34;&gt;#&lt;/a&gt;
    JDBC基本操作
&lt;/h2&gt;&lt;h2 id=&#34;hikari的配置&#34;&gt;
    &lt;a href=&#34;#hikari%e7%9a%84%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;
    Hikari的配置
&lt;/h2&gt;&lt;h2 id=&#34;mybatis&#34;&gt;
    &lt;a href=&#34;#mybatis&#34;&gt;#&lt;/a&gt;
    mybatis
&lt;/h2&gt;&lt;h3 id=&#34;mybatis-generator&#34;&gt;
    &lt;a href=&#34;#mybatis-generator&#34;&gt;#&lt;/a&gt;
    mybatis-generator
&lt;/h3&gt;&lt;h3 id=&#34;mybatis-dynamic-sql&#34;&gt;
    &lt;a href=&#34;#mybatis-dynamic-sql&#34;&gt;#&lt;/a&gt;
    mybatis-dynamic-sql
&lt;/h3&gt;&lt;h2 id=&#34;主从切换&#34;&gt;
    &lt;a href=&#34;#%e4%b8%bb%e4%bb%8e%e5%88%87%e6%8d%a2&#34;&gt;#&lt;/a&gt;
    主从切换
&lt;/h2&gt;&lt;h2 id=&#34;多数据源配置&#34;&gt;
    &lt;a href=&#34;#%e5%a4%9a%e6%95%b0%e6%8d%ae%e6%ba%90%e9%85%8d%e7%bd%ae&#34;&gt;#&lt;/a&gt;
    多数据源配置
&lt;/h2&gt;&lt;h2 id=&#34;尝试写一个springboot-hikari-datasource-starter&#34;&gt;
    &lt;a href=&#34;#%e5%b0%9d%e8%af%95%e5%86%99%e4%b8%80%e4%b8%aaspringboot-hikari-datasource-starter&#34;&gt;#&lt;/a&gt;
    尝试写一个springboot-hikari-datasource-starter
&lt;/h2&gt;&lt;p&gt;定义配置，可以让用户简单的实现多数据源的配置&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
