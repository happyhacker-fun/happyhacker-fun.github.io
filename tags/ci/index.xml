<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Ci on happyhacker的技术分享</title>
        <link>http://localhost:1313/tags/ci/</link>
        <description>Recent content in Ci on happyhacker的技术分享</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 17 Apr 2020 23:28:21 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/ci/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>基于ansible的渐进上线流程探究</title>
        <link>http://localhost:1313/p/%E5%9F%BA%E4%BA%8Eansible%E7%9A%84%E6%B8%90%E8%BF%9B%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B%E6%8E%A2%E7%A9%B6/</link>
        <pubDate>Fri, 17 Apr 2020 23:28:21 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%9F%BA%E4%BA%8Eansible%E7%9A%84%E6%B8%90%E8%BF%9B%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B%E6%8E%A2%E7%A9%B6/</guid>
        <description>&lt;p&gt;继上一篇文章&lt;a class=&#34;link&#34; href=&#34;http://localhost:1313/post/spring-tomcat-tutorial/&#34; &gt;Springboot使用内置和独立tomcat以及其他思考&lt;/a&gt;中描述的，继续优化整个发布流程。&lt;/p&gt;
&lt;p&gt;实际上线之后发现每次发布要改版本号还是挺麻烦的，手动改版本号还是不太适合频繁迭代的项目。要实现不改版本号且服务不中断就得重新想办法了。&lt;br&gt;
观察发现，当同一个包覆盖原有的包时，接口会报404，很显然这是tomcat正在解压新的war包，还没有准备好服务，这个过程肯定是无法优化的，只能想办法让这台机器在这期间不提供服务。还是需要nginx来做。&lt;/p&gt;
&lt;h2 id=&#34;整体思路&#34;&gt;
    &lt;a href=&#34;#%e6%95%b4%e4%bd%93%e6%80%9d%e8%b7%af&#34;&gt;#&lt;/a&gt;
    整体思路
&lt;/h2&gt;&lt;p&gt;整个思路基于接入层的LB具有健康检测功能，也就是当某台服务器的80端口不开放时，将没有请求访问到这台服务器。这是整个方案设计的基础。&lt;/p&gt;
&lt;p&gt;假设一共有n台机器需要发布新版本，流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/%e5%88%86%e6%ad%a5%e4%b8%8a%e7%ba%bf%e6%b5%81%e7%a8%8b%e5%9b%be.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;渐进上线流程图&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;不考虑使用任何现有的持续集成工具，仅用ansible实现上述流程。&lt;/p&gt;
&lt;h2 id=&#34;实施过程&#34;&gt;
    &lt;a href=&#34;#%e5%ae%9e%e6%96%bd%e8%bf%87%e7%a8%8b&#34;&gt;#&lt;/a&gt;
    实施过程
&lt;/h2&gt;&lt;h3 id=&#34;验证健康检测&#34;&gt;
    &lt;a href=&#34;#%e9%aa%8c%e8%af%81%e5%81%a5%e5%ba%b7%e6%a3%80%e6%b5%8b&#34;&gt;#&lt;/a&gt;
    验证健康检测
&lt;/h3&gt;&lt;p&gt;Nginx的健康检查可以是主动检查或被动检查，作为反向代理（负载均衡器）的Nginx默认支持被动健康检查，这里使用默认配置来验证，后续再考虑使用openresty引入更灵活高效的主动健康检查。被动检查的问题在于是使用真实的请求作为检查的样本，即当真实请求失败多少次以后将上游服务器标记为不可用，然后会再每隔一段时间分发少量请求到已经标记为不可用的上游服务器，如果超过多少次成功后重新加入池子里。&lt;/p&gt;
&lt;h3 id=&#34;关闭端口&#34;&gt;
    &lt;a href=&#34;#%e5%85%b3%e9%97%ad%e7%ab%af%e5%8f%a3&#34;&gt;#&lt;/a&gt;
    关闭端口
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iptables -A INPUT -p tcp --dport 80 -j DROP
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;检查是否仍有请求&#34;&gt;
    &lt;a href=&#34;#%e6%a3%80%e6%9f%a5%e6%98%af%e5%90%a6%e4%bb%8d%e6%9c%89%e8%af%b7%e6%b1%82&#34;&gt;#&lt;/a&gt;
    检查是否仍有请求
&lt;/h3&gt;</description>
        </item>
        
    </channel>
</rss>
